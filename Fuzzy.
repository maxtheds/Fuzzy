#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int min(int a, int b, int c) {
    int min = a;
    if (b < min) min = b;
    if (c < min) min = c;
    return min;
}

int levenshtein_distance(char *s1, char *s2) {
    int len1 = strlen(s1);
    int len2 = strlen(s2);
    int i, j;
    
    // Swap strings if necessary to ensure len1 <= len2
    if (len1 > len2) {
        char *temp = s1;
        s1 = s2;
        s2 = temp;
        int temp_len = len1;
        len1 = len2;
        len2 = temp_len;
    }
    
    int *previous = (int *)malloc((len1 + 1) * sizeof(int));
    int *current = (int *)malloc((len1 + 1) * sizeof(int));
    
    // Initialize the previous row
    for (i = 0; i <= len1; i++) {
        previous[i] = i;
    }
    
    // Calculate the distances
    for (j = 1; j <= len2; j++) {
        current[0] = j;
        for (i = 1; i <= len1; i++) {
            int cost = (s1[i-1] == s2[j-1]) ? 0 : 1;
            current[i] = min(current[i-1] + 1, previous[i] + 1, previous[i-1] + cost);
        }
        
        // Swap the current and previous rows
        int *temp = current;
        current = previous;
        previous = temp;
    }
    
    int distance = previous[len1];
    
    // Free the arrays
    free(previous);
    free(current);
    
    return distance;
}

int main() {
    char str1[100], str2[100];
    printf("Enter first string: ");
    scanf("%99s", str1);
    printf("Enter second string: ");
    scanf("%99s", str2);
    
    int distance = levenshtein_distance(str1, str2);
    printf("Levenshtein Distance: %d\n", distance);
    
    return 0;
}
